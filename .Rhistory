left5a <- a5a-error
right5a <- a5a+error
a5b <- -3
s5b <- 1.5
n5b <- 9
error <- qnorm(0.975)*s5b/sqrt(n5b)
left5b <- a5b-error
right5b <- a5b+error
a5b <- 1
s5b <- 1.8
n5b <- 9
error <- qnorm(0.975)*s5b/sqrt(n5b)
left5b <- a5b-error
right5b <- a5b+error
a5a <- -3
s5a <- 1.5
n5a <- 9
error <- qnorm(0.995)*s5a/sqrt(n5a)
left5a <- a5a-error
right5a <- a5a+error
a5b <- 1
s5b <- 1.8
n5b <- 9
error <- qnorm(0.995)*s5b/sqrt(n5b)
left5b <- a5b-error
right5b <- a5b+error
power.t.test(n=100, delta= .01, sd= .04,
type="one.sample", alt = "one.sided")
power.t.test(power = .9, delta= .01, sd= .04,
type="one.sample", alt = "one.sided")
?exact.text
choose(4,3) * 0.5^4 + choose(4,4) * 0.5^4
pbinom(2, size = 4, prob = .5, lower.tail = FALSE)
ppois(.56, 1, lower.tail = FALSE)
ppois(.0056, 1, lower.tail = FALSE)
ppois(.0056, .01, lower.tail = FALSE)
ppois(.56, 1, lower.tail = FALSE)
ppois(10, 179, lower.tail = FALSE)
ppois(10, 179, lower.tail = TRUE)
ppois(9, 179, lower.tail = FALSE)
a <- 1100
s <- 30
n <- 9
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
choose(4,3) * 0.5^4 + choose(4,4) * 0.5^4
pbinom(2, size = 4, prob = .5, lower.tail = FALSE)
library(MASS)
str(MASS)
?shuttle
head(shuttle)
summary(shuttle)
logreg <- glm(use ~ wind, data=shuttle, family="binomial")
summary(logreg)
logreg2 <- glm(use ~ wind + magn, data=shuttle, family="binomial")
summary(logreg2)
library(dplyr)
?gsub
?replace
shuttle1 <- shuttle
shuttle1$use1 <-shuttle1$use
shuttle1$use1[shuttle1$use1 == "auto"] <- 1
shuttle1$use1[which(shuttle1$use1=="auto")]<-"1"
str(shuttle1)
shuttle2 <- shuttle1[,1:7]
shuttle2$use1 <- shuttle2$use
str(shuttle2)
shuttle2$use1[which(shuttle2$use1=="auto")]<-"1"
str(shuttle2)
rm(shuttle2)
shuttle1 <- shuttle1[,1:7]
shuttle1$use1 <- as.character(shuttle1$use)
shuttle1$use1[shuttle1$use1 == "auto"] <- 1
shuttle1$use1[shuttle1$use1 == "noauto"] <- 0
str(shuttle1)
shuttle1$use1 <- as.factor(shuttle1$use1)
str(shuttle1)
shuttle1$use1 <- as.numeric(shuttle1$use1)
str(shuttle1)
shuttle1 <- shuttle1[,1:7]
shuttle1$use1 <- as.character(shuttle1$use)
s
shuttle1$use1[shuttle1$use1 == "auto"] <- 1
shuttle1$use1[shuttle1$use1 == "noauto"] <- 0
str(shuttle1)
shuttle1$use1 <- as.numeric(shuttle1$use1)
str(shuttle1)
rm(logreg)
rm(logreg2)
logreg <- glm(use1 ~ wind, data=shuttle1, family="binomial")
summary(logreg)
exp(logreg$coef)
exp(logreg$coef[1] + logreg$coef[2])
logreg2 <- glm(use1 ~ wind + magn, data=shuttle1, family="binomial")
summary(logreg2)
exp(logreg$coef[1])/exp(logreg$coef[1] + logreg$coef[2])
exp(logreg2$coef[1])/exp(logreg2$coef[1] + logreg2$coef[2])
logreg3 <- glm(1-use1 ~ wind, data=shuttle1, family="binomial")
summary(logreg3)
library(datasets)
head(InsectSprays)
is <- InsectSprays
str(is)
poireg <- glm(count~spray, data=is, family="poisson")
summary(poireg)
exp(poireg$coef)
exp(poireg2$coef[1])/exp(poireg$coef[1] + poireg$coef[2])
exp(poireg$coef[1])/exp(poireg$coef[1] + poireg$coef[2])
##Q5
is$treat <- is$spray
is$treat[is$treat == "A" |is$treat == "B" | is$treat == "C"] <- 1
is$treat <- as.character(is$spray)
is$treat[is$treat == "A" |is$treat == "B" | is$treat == "C"] <- 1
is$treat[is$treat == "D" |is$treat == "E" | is$treat == "F"] <- 0
is$treat <- as.factor(as.numeric(is$treat))
is$time <- rnorm()
is$time <- rnorm(72)
?rnomr
?rnorm
is$time <- rnorm(72, mean = 20, sd = 3)
glm(count ~ treat, offset=ln(is$time), data = is, family = poisson)
glm(count ~ treat, offset=log(is$time), data = is, family = poisson)
glm(count ~ treat, offset=log10 + log(is$time), data = is, family = poisson)
glm(count ~ treat, offset=log(is$time)*10, data = is, family = poisson)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y~x)
x2 <- 0:5
y2 <- c(0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y2~x2)
lm(y2~x2)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?concrete
plot(concrete$CompressiveStrength, pch=19)
library("Hmisc", lib.loc="D:/R/R-3.1.2/library")
?cut2()
plot(training$CompressiveStrength, pch=19)
packageVersion("caret")
training$cutage <- cut2(training$Age, g = 4)
plot(training$CompressiveStrength, pch=19, color=cutage)
plot(training$CompressiveStrength, pch=19, color=training$cutage)
qplot(training$CompressiveStrength, pch=19, color=training$cutage)
plot(training$CompressiveStrength, pch=19, color=training$cutage)
plot(training$CompressiveStrength, pch=19, colour=training$cutage)
warnings()
warnings()
plot(training$CompressiveStrength, pch=19, color=cutage, data=training)
hist(SuperPlasticizer)
hist(SuperPlasticizer, data=training)
hist(Superplasticizer, data=training)
hist(training$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- grep("^IL", names(training), value=T)
trainIL <- select(training, starts_with("IL"))
library(dplyr)
trainIL <- select(training, starts_with("IL"))
trainIL <- cbind(trainIL, training$diagnosis)
trainIL <- select(training, starts_with("IL"))
hist(trainIL$IL_11)
hist(trainIL$IL_13)
hist(trainIL$IL_16)
hist(trainIL$IL_17E)
hist(trainIL$IL_1alpha)
hist(trainIL$IL_3)
hist(trainIL$IL_4)
hist(trainIL$IL_5)
hist(trainIL$IL_6)
hist(trainIL$IL_6_Receptor)
hist(trainIL$IL_7)
hist(trainIL$IL_8)
preproc <- preProcess(trainIL, method = "pca", pcaComp = 12)
preproc$rotation
trans = preProcess(trainIL, method=c("BoxCox", "center", "scale", "pca"))
require(caret)
trans = preProcess(trainIL, method=c("BoxCox", "center", "scale", "pca"))
install.packages("e1071")
trans = preProcess(trainIL, method=c("BoxCox", "center", "scale", "pca"))
PC = predict(trans, trainIL)
?thresh
PC = predict(trans, trainIL, thresh = 0.9)
?predict
preproc$std
sum(preproc$std)
sumpreproc <- sum(preproc$std)
pervar <- preproc$std/sumpreproc
pervar
sum(pervar)
sum(pervar[c(1,3:11)])
sum(pervar[c(1,3,4,6:9,11)])
PC = predict(trans, trainIL, thresh = 90)
trans = preProcess(trainIL, method=c("BoxCox", "center", "scale", "pca"), thresh = .9)
PC = predict(trans, trainIL)
trainIL2 <- cbind(trainIL, testing$diagnosis)
trainIL2 <- cbind(trainIL, training$diagnosis)
testIL <- select(testing, starts_with("IL"))
testIL <- cbind(testIL, testing$diagnosis)
require(caret)
prep = preProcess(trainIL2[,-13], method=c("BoxCox", "center", "scale",
"pca"), thresh = .8)
trainPC = predict(prep, trainIL2[,-13], method=c("BoxCox", "center", "scale",
"pca"), thresh = .8)
modelfit <- train(trainIL2[,13] ~ ., method = "glm", data = trainPC)
testPC <- predict(prep, testIL[,-13],
method=c("BoxCox", "center", "scale", "pca"),
thresh = .8)
confusionMatrix(testIL[,13], predict(modelfit, testPC))
linmodel <- train(trainIL2[,13] ~ ., method = "glm", data = trainIL2)
warnings()
linmodel <- train(trainIL2[,13] ~ ., method = "lm", data = trainIL2)
pred <- predict(linmodel, testIL)
library(dplyr)
trainIL2 <- rename(trainIL2, diagnosis = training$diagnosis)
trainIL2 <- rename(trainIL2, diagnosis = "training$diagnosis")
trainIL2 <- rename(trainIL2, "diagnosis" = "training$diagnosis")
trainIL2 <- rename(trainIL2, diagnosis = "training$diagnosis")
trainIL <- select(training, starts_with("IL"), diagnosis)
trainIL <- select(training, starts_with("IL"))
trainIL2 <- select(training, starts_with("IL"), diagnosis)
testIL <- select(testing, starts_with("IL"), diagnosis)
View(testing)
linmodel <- train(diagnosis ~ ., method = "glm", data = trainIL2)
pred <- predict(linmodel, testIL)
confusionMatrix(diagnosis, predict(linmodel, pred))
qplot(diagnosis, pred, data=testIL)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data(segmentationOriginal)
library(AppliedPredictiveModeling)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.7,
list=FALSE)
trainseg <- segmentationOriginal[inTrain,]
testseg <- segmentationOriginal[-inTrain,]
?CART
??CART
set.seed(125)
modfit1 <-train(Case ~ ., method = 'rpart', data = trainseg)
print(modfit1$finalModel)
predict(modfit1, TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
predict(modfit1, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modfit1, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
modfit1 <-train(Class ~ ., method = 'rpart', data = trainseg)
trainseg <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testseg <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modfit1 <-train(Class ~ ., method = 'rpart', data = trainseg)
print(modfit1$finalModel)
predict(modfit1, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
plot(modfit1$finalModel, uniform=TRUE, main="Classification Tree")
text(modfit1$finalModel, use.n=TRUE, all=TRUE, cex = .8)
text(modfit1$finalModel, use.n=TRUE, all=TRUE, cex = .5)
plot(modfit1$finalModel, uniform=TRUE, main="Classification Tree")
text(modfit1$finalModel, use.n=TRUE, all=TRUE, cex = .5)
plot(modfit1$finalModel, uniform=TRUE, main="Classification Tree")
text(modfit1$finalModel, use.n=TRUE, all=TRUE, cex = .6)
install.packages("pgmm")
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
library("caret", lib.loc="D:/R/R-3.1.2/library")
olivefit <- train(Area ~., method = "rpart", data = olive)
print(olivefit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(olivefit, newdata = as.data.frame(t(colMeans(olive))))
rm(newdata)
predict(olivefit, newdata = as.data.frame(t(colMeans(olive))))
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logregmodel <- glm(chd~age + alcohol + obesity + tobacco + typea + ldl,
family = "binomial", data = trainSA)
logregmodel <- train(chd~age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
logpred <- predict(logregmodel, testSA)
missClass(trainSA$chd, logpred)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, logpred)
missClass(testSA$chd, logpred)
trainpred <- predict(logregmodel, trainSA)
missClass(trainSA$chd, trainpred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
?vowel.train
vtrain <- vowel.train
str(vtrain)
summary(vtrain)
rm(vtrain)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
library(caret)
?varImp
?train
modfit< train(y~., data=vowel.train, method="rt", prox=TRUE)
modfit<- train(y~., data=vowel.train, method="rt", prox=TRUE)
modfit<- train(y~., data=vowel.train, method="rf", prox=TRUE)
rfNews()
modfit<- train(y~., data=vowel.train, method="rf", prox=TRUE)
?varImp
varImp(modfit)
library(AppliedPredictiveModeling)
install.packages("plyr")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(Hmisc)
training$cutage <- cut2(training$Age, g = 4)
plot(training$CompressiveStrength, pch=19, color=cutage, data=training)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- grep("^IL", names(training), value=T)
library(dplyr)
trainIL <- select(training, starts_with("IL"))
hist(trainIL$IL_11)
preproc <- preProcess(trainIL, method = "pca", pcaComp = 12)
preproc$rotation
require(caret)
trans = preProcess(trainIL, method=c("BoxCox", "center", "scale",
"pca"), thresh = .9)
PC = predict(trans, trainIL)
preproc$std
sumpreproc <- sum(preproc$std)
pervar <- preproc$std/sumpreproc
pervar
sum(pervar)
sum(pervar[c(1,3,4,6:9,11)])
library(dplyr)
trainIL <- select(training, starts_with("IL"))
trainIL2 <- select(training, starts_with("IL"), diagnosis)
testIL <- select(testing, starts_with("IL"), diagnosis)
trainIL2 <- rename(trainIL2, diagnosis = training$diagnosis)
require(caret)
prep = preProcess(trainIL2[,-13],
method=c("BoxCox", "center", "scale", "pca"),
thresh = .8)
trainPC = predict(prep, trainIL2[,-13],
method=c("BoxCox", "center", "scale", "pca"),
thresh = .8)
trainPC = predict(prep, trainIL2[,-13],
method=c("BoxCox", "center", "scale", "pca"),
thresh = .8)
trainPC = predict(prep, trainIL2[,-13],
method=c("BoxCox", "center", "scale", "pca"),
thresh = .8)
testPC <- predict(prep, testIL[,-13],
method=c("BoxCox", "center", "scale", "pca"),
thresh = .8)
testPC <- predict(prep, testIL[,-13],
method=c("BoxCox", "center", "scale", "pca"),
thresh = .8)
confusionMatrix(testIL[,13], predict(modelfit, testPC))
linmodel <- train(diagnosis ~ ., method = "glm", data = trainIL2)
pred <- predict(linmodel, testIL)
qplot(diagnosis, pred, data=testIL)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainseg <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testseg <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
modfit1 <-train(Class ~ ., method = 'rpart', data = trainseg)
plot(modfit1$finalModel, uniform=TRUE, main="Classification Tree")
text(modfit1$finalModel, use.n=TRUE, all=TRUE, cex = .6)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
predict(olivefit, newdata = as.data.frame(t(colMeans(olive))))
olivefit <- train(Area ~., method = "rpart", data = olive)
print(olivefit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(olivefit, newdata = as.data.frame(t(colMeans(olive))))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logregmodel <- train(chd~age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
logregmodel <- train(chd~age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
logregmodel <- train(chd~age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial", data = trainSA)
trainpred <- predict(logregmodel, trainSA)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, trainpred)
missClass(testSA$chd, logpred)
logpred <- predict(logregmodel, testSA)
trainpred <- predict(logregmodel, trainSA)
missClass(trainSA$chd, trainpred)
missClass(testSA$chd, logpred)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
modfit<- train(y~., data=vowel.train, method="rf", prox=TRUE)
varImp(modfit)
detach("package:ElemStatLearn", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:Formula", unload=TRUE)
detach("package:AppliedPredictiveModeling", unload=TRUE)
detach("package:caret", unload=TRUE)
library("Formula", lib.loc="D:/R/R-3.1.2/library")
detach("package:pgmm", unload=TRUE)
detach("package:randomForest", unload=TRUE)
detach("package:rpart", unload=TRUE)
detach("package:splines", unload=TRUE)
detach("package:survival", unload=TRUE)
detach("package:Hmisc", unload=TRUE)
library("devtools", lib.loc="D:/R/R-3.1.2/library")
install.packages("RCurl")
library("RCurl", lib.loc="D:/R/R-3.1.2/library")
library("devtools", lib.loc="D:/R/R-3.1.2/library")
install.packages("Rtools")
library("devtools", lib.loc="D:/R/R-3.2.0/library")
install.packages("rtools")
find_rtools()
install.packages("rtools")
x <- ((5500-14000)/1000)*3.5
Print("Expected temperature change is ", x)
print("Expected temperature change is ", x)
print("Expected temperature change is ") x
print("Expected temperature change is ")
print("Expected temperature change is "); print(x)
print("Expected temperature change is " print(x))
print("Expected temperature change is ", print(x))
print("Expected temperature change is ")
print(x)
print("Expected temperature change is ");print(x)
getwd()
setwd("D:/eCourses/09_dataProducts/tempchange/temp_change")
library(slidify)
slidify("index.Rmd")
install_version("stringr", version="0.6.2")
library(devtools)
install_version("stringr", version="0.6.2")
library(slidifyLibraries)
slidify("index.Rmd")
install_github('ramnathv/slidify', ref = github_pull(425))
slidify("index.Rmd")
browseURL("index.html")
print(Expected temperature change is);print(x)
y <- 4
print("your age is ", y)
print("your age is "), y
print("your age is ") y
slidify("index.Rmd")
x <- ((5500-14200)/1000)*3.5
((5500-14200)/1000)*3.5
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
